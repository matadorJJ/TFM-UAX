# -*- coding: utf-8 -*-
"""arc_generator_def.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19AuMYdqIoxQy6qesCawSQA4GDWiYvGHv
"""

#
# Juan Julián Moreno Piedra
# 27-08-2024
#

# Import necessary libraries
import pandas as pd
import os
import io
import subprocess

#
# Get the report "list of sessions" and generate "sessions_ids"
#

# Define file path
output_path = r"C:\Reports"
session_ids_file = os.path.join(output_path, "session_ids.txt")

# Executing list sessision report in the cell manager
subprocess.run(["omnirpt", "-report", "list_sessions", "-tab", "-log", session_ids_file])

# Import the CSV file
df = pd.read_csv(session_ids_file,
                 sep='\t',            # Separator by tab
                 encoding='utf-16',   # UTF-16 encoding
                 skiprows=4)          # Skip the first 5 rows

# Keep only the 'Session ID' column
df = df[['Session ID']]

# Save to a file
df.to_csv('session_ids.txt', index=False, header=False)

# generate "client statistics"
# Define file path
output_path = r"C:\Reports"
cst_file = os.path.join(output_path, "se.tab")


# Executing list sessision report in the cell manager
subprocess.run(["omnirpt", "-report", "client statistics", "-tab", "-log", cst_file])

# Import the CSV file
df = pd.read_csv(cst_file,
                 sep='\t',            # Separator by tab
                 encoding='utf-16',   # UTF-16 encoding
                 skiprows=4)          # Skip the first 5 rows
# Save to a file
df.to_csv('cst_modificado.csv', index=False, header=False)

df.head()

# Path of the directory in local Google Drive
directory_path = 'C:\Reports'

#
# Now let's generate the final file, for that we have to
# generate a session report for each session and then
# concatenate in the final file we will use to create the
# dataframe we will load in the next notebook
#

# Define the location of the Session IDs file and the output files for the reports
output_path = r"C:\Reports"
session_ids_file = os.path.join(output_path, "session_ids.txt")

# Check if the session_ids.txt file exists
if not os.path.exists(session_ids_file):
    print(f"Error: No se encontró el archivo session_ids.txt en {output_path}.")
    input("Presiona cualquier tecla para salir...")
    exit()

# Initialize a counter for the file names
count = 1

# Read the session_ids.txt file and generate the reports
with open(session_ids_file, 'r') as file:
    for line in file:
        session_id = line.strip()
        if session_id:
            print(f"Generando reporte de 'Session Objects' para la sesión {session_id}...")

            # Define the output file name using the counter
            output_file = os.path.join(output_path, f"session_report_{count}.txt")

            # Run the omnirpt command and save the report to the output file
            subprocess.run(["omnirpt", "-report", "session_objects", "-session", session_id, "-tab", "-log", output_file])

            # Increase the counter for the next file
            count += 1

# Read the session_ids.txt file and generate the reports
df_backup = pd.DataFrame()

# Iterate over all files in the directory
for filename in os.listdir(directory_path):
    file_path = os.path.join(directory_path, filename)
#
    # Verify that it is a file and that it has the '.txt' extension
    if os.path.isfile(file_path) and filename.endswith('.txt'):
        # Reading the content using UTF-16
        with open(file_path, 'r', encoding='utf-16') as file:
            raw_text = file.read()

       ## Extract the lines containing tabulated data
        data_lines = [line for line in raw_text.splitlines() if '\t' in line]

       # Join the filtered lines to create a data stream that can be read as a CSV
        data_string = "\n".join(data_lines)

       # Use a StringIO to allow pandas to read the string as if it were a file
        data_io = io.StringIO(data_string)

       # Convert to DataFrame
        df_backup = pd.read_csv(data_io, sep='\t')

       # Concatenate the data to the 'backups' DataFrame
        df_backup = pd.concat([df_backup, df_backup], ignore_index=True)

# Show the first rows of the resulting DataFrame
print(df_backup.head())

# Save the resulting DataFrame to a CSV file
output_path = '/content/drive/MyDrive/TFM/archivo_modificado.csv'
df_backup.to_csv(output_path, index=False)